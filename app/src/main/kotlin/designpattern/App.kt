/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package designpattern
import designpattern.iterator.*
import arrow.core.getOrElse
fun main() {
  // iterator pattern
  println("\noop style iterator design pattern\n ---------------------------")
  val friends = MyFriends(listOf(Friend("ben", 22),Friend("John", 20)))
  val iterator = friends.createFriendsIterator()
  while(iterator.hasMore()) {
    val friend = iterator.next()
    println("friends printing : name ${friend?.name}, aged ${friend?.age}")
  }
  // functional iterator pattern
  println("\nfunctional style iterator design pattern\n ----------------------------")
  val ffriends = FFriends(listOf(FFriend("ben", 22), FFriend("John", 20))) to 0
  tailrec fun ffriendsRec(statefulFriends: Pair<FFriends, State>) : Unit =
      if(hasMore(statefulFriends.first, statefulFriends.second )){
      val friend: Pair<FFriend, State> = next(statefulFriends).getOrElse { FFriend("",0) to 0 }
      println("ffriend printing :  ${friend.first}")
      val newStatefulFriends = statefulFriends.first to friend.second 
      ffriendsRec(newStatefulFriends)
      }
      else {println("end of friends\n")
    }
  ffriendsRec(ffriends)
}
