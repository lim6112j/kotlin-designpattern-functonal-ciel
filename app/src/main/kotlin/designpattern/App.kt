/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package designpattern
import designpattern.iterator.*
fun main() {
  // iterator pattern
  println("\noop style iterator design pattern\n ---------------------------")
  val friends = MyFriends(listOf(Friend("ben", 22),Friend("John", 20)))
  val iterator = friends.createFriendsIterator()
  while(iterator.hasMore()) {
    val friend = iterator.next()
    println("friends printing : name ${friend?.name}, aged ${friend?.age}")
  }
  // functional iterator pattern
  println("\nfunctional style iterator design pattern\n ----------------------------")
  val ffriends = FFriends(listOf(FFriend("ben", 22), FFriend("John", 20)))
  tailrec fun ffriendsRec() : Unit =
      if(ffriends.hasMore()){
      val friend = ffriends.next()
      println("ffriend printing : name ${friend?.name}, aged ${friend?.age}")
      ffriendsRec()
      }
      else {println("end of friends\n")
    }
  ffriendsRec()
}
